// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/vvkh/social-network/internal/profiles/entity"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// ListFriends mocks base method
func (m *MockUseCase) ListFriends(ctx context.Context, profileID uint64) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriends", ctx, profileID)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriends indicates an expected call of ListFriends
func (mr *MockUseCaseMockRecorder) ListFriends(ctx, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockUseCase)(nil).ListFriends), ctx, profileID)
}

// ListPendingRequests mocks base method
func (m *MockUseCase) ListPendingRequests(ctx context.Context, profileID uint64) ([]entity.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingRequests", ctx, profileID)
	ret0, _ := ret[0].([]entity.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingRequests indicates an expected call of ListPendingRequests
func (mr *MockUseCaseMockRecorder) ListPendingRequests(ctx, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingRequests", reflect.TypeOf((*MockUseCase)(nil).ListPendingRequests), ctx, profileID)
}

// CreateRequest mocks base method
func (m *MockUseCase) CreateRequest(ctx context.Context, profileFromID, profileToID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, profileFromID, profileToID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRequest indicates an expected call of CreateRequest
func (mr *MockUseCaseMockRecorder) CreateRequest(ctx, profileFromID, profileToID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockUseCase)(nil).CreateRequest), ctx, profileFromID, profileToID)
}

// AcceptRequest mocks base method
func (m *MockUseCase) AcceptRequest(ctx context.Context, profileFromID, profileToID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRequest", ctx, profileFromID, profileToID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRequest indicates an expected call of AcceptRequest
func (mr *MockUseCaseMockRecorder) AcceptRequest(ctx, profileFromID, profileToID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRequest", reflect.TypeOf((*MockUseCase)(nil).AcceptRequest), ctx, profileFromID, profileToID)
}

// DeclineRequest mocks base method
func (m *MockUseCase) DeclineRequest(ctx context.Context, profileFromID, profileToID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineRequest", ctx, profileFromID, profileToID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineRequest indicates an expected call of DeclineRequest
func (mr *MockUseCaseMockRecorder) DeclineRequest(ctx, profileFromID, profileToID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineRequest", reflect.TypeOf((*MockUseCase)(nil).DeclineRequest), ctx, profileFromID, profileToID)
}

// StopFriendship mocks base method
func (m *MockUseCase) StopFriendship(ctx context.Context, profileID, otherProfileID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopFriendship", ctx, profileID, otherProfileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopFriendship indicates an expected call of StopFriendship
func (mr *MockUseCaseMockRecorder) StopFriendship(ctx, profileID, otherProfileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopFriendship", reflect.TypeOf((*MockUseCase)(nil).StopFriendship), ctx, profileID, otherProfileID)
}
